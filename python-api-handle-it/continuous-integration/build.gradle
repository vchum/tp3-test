def majorVersion = System.getenv("MAJOR_VERSION") ?: "1"
def minorVersion = System.getenv("MINOR_VERSION") ?: "0"

def buildVersion = System.getenv("BUILD_NUMBER")

version = majorVersion + "." + minorVersion + "." + buildVersion 

task purge(type:Delete) {
  //println 'Cleaning up old files'
  delete 'build/*.zip'
}

task dep(type:Exec, dependsOn: purge) {
  //println 'Installing dependencies'
    executable 'sh'
    args '-c', 'pip3 install -r app/requirements.txt'
    standardOutput = new ByteArrayOutputStream()
    ext.output = { return standardOutput.toString() }
}

// task test(type:Exec, dependsOn: dep) {
//   //println 'Executing tests'
//     executable 'sh'
//     args '-c', 'pytest app/test/test.py >> result-pytest.txt'
//     standardOutput = new ByteArrayOutputStream()
//     ext.output = { return standardOutput.toString() }
// }

task pycodestyle(type:Exec, dependsOn: dep) {
    executable 'sh'
    args '-c', "pycodestyle app/ >> result-pycode.txt"
    ignoreExitValue true
}

task lint(type:Exec, dependsOn: dep) {
    executable 'sh'
    args '-c', "flake8 --output-file=output.txt app/"
    ignoreExitValue true
}

def tarfile = "project-" + version
task packageDistribution(type: Zip, dependsOn: dep) {
    from ('app') { into 'app' }
    archiveFileName = tarfile + ".zip"
    destinationDirectory = file("build")
}

//def newVersion = minorVersion.toInteger() + 1

task up(type:Exec, dependsOn: packageDistribution) {
  executable 'sh'
  args '-c', 'curl -v --user "'+nexusUsername+':'+nexusPassword+'" --upload-file build/project-'+version+'.zip http://'+nexusRepo+':8081/repository/ArchiveZip/demo-python/project/'+version+'/application-'+version+'.zip'
  standardOutput = new ByteArrayOutputStream()
  ext.output = { return standardOutput.toString() }
//   doLast {
//      environment 'MINOR_VERSION', newVersion
//    }
}

task updateItManagement(type:Exec, dependsOn: up) {
  executable 'sh'
  args '-c', 'curl -v http://localhost:5000/application'
  standardOutput = new ByteArrayOutputStream()
  ext.output = { return standardOutput.toString() }
}